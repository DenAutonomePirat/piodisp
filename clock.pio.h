// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// shift_20_msb //
// ------------ //

#define shift_20_msb_wrap_target 0
#define shift_20_msb_wrap 8

static const uint16_t shift_20_msb_program_instructions[] = {
    //     .wrap_target
    0xf847, //  0: set    y, 7            side 2
    0x80a0, //  1: pull   block
    0xf033, //  2: set    x, 19           side 0
    0x7601, //  3: out    pins, 1         side 1 [2]
    0xb142, //  4: nop                    side 0 [1]
    0x0043, //  5: jmp    x--, 3
    0x0088, //  6: jmp    y--, 8
    0xf847, //  7: set    y, 7            side 2
    0x0001, //  8: jmp    1
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program shift_20_msb_program = {
    .instructions = shift_20_msb_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config shift_20_msb_program_get_default_config(uint offset)
{
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + shift_20_msb_wrap_target, offset + shift_20_msb_wrap);
    sm_config_set_sideset(&c, 3, true, false);
    return c;
}

void shift_20_msb_program_init(PIO pio, uint sm, uint offset, uint pin, uint clk_pin)
{
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 2, true);
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, clk_pin);
    pio_gpio_init(pio, clk_pin + 1);
    pio_sm_config c = shift_20_msb_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, clk_pin);
    sm_config_set_clkdiv(&c, 100);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &c);
}

#endif
